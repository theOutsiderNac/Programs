import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    // maxCounter will store max value of number of fields, i.e. region.
    // current_counter stores value of current number of fields.
    public static int maxCounter=0,current_counter=0;
    
    /*
        checkRegion uses recursion to find the total area of region.
        in parameters array and ith and jth position is sent.
        We check if arr[i][j]==1 and if its true we increase counter
        arr[i][j]=99 is used so that program will not check previously visited locations.
    */
    public static int checkRegion(int[][] arr,int i,int j){
        int temp=0;
        if((i+1)<arr.length){   // for next row (i+1)(j)
            if(arr[i+1][j]==1){
                current_counter++;
                arr[i+1][j]=99;
                checkRegion(arr,i+1,j);
            }
        }
        if((i-1)>=0){   // for previous row (i-1)(j)
            if(arr[i-1][j]==1){
                current_counter++;
                arr[i-1][j]=99;
                checkRegion(arr,i-1,j);
            }
        }
        if((j+1)<arr[i].length){    // for next column (i)(j+1)
            if(arr[i][j+1]==1){
                current_counter++;
                arr[i][j+1]=99;
                checkRegion(arr,i,j+1);     
            }
        }
        if((j-1)>=0){           // for previous column (i)(j-1)
            if(arr[i][j-1]==1){
                current_counter++;
                arr[i][j-1]=99;
                checkRegion(arr,i,j-1);
            }
        }
        if((i+1)<arr.length && (j+1)<arr[i].length){    // for diagonal i+1,j+1
            if(arr[i+1][j+1]==1){
                current_counter++;
                arr[i+1][j+1]=99;
                checkRegion(arr,i+1,j+1);
            }
        }
        if((i-1)>=0 && (j-1)>=0){   // for diagonal i-1,j-1
            if(arr[i-1][j-1]==1){
                current_counter++;
                arr[i-1][j-1]=99;
                checkRegion(arr,i-1,j-1);
            }            
        }
        if((i-1)>=0 && (j+1)<arr[i].length){    // for diagonal i-1,j+1
            if(arr[i-1][j+1]==1){
                current_counter++;
                arr[i-1][j+1]=99;
                checkRegion(arr,i-1,j+1);
            }            
        }
        if((i+1)<arr.length && (j-1)>=0){   // for diagonal i+1,j-1
            if(arr[i+1][j-1]==1){
                current_counter++;
                arr[i+1][j-1]=99;
                checkRegion(arr,i+1,j-1);
            }             
        }

        return current_counter; // returns total counter of region
    }
    
    
    /*
        getMaxRegion mainly serves as start point for recursion.
        We check each and every element in the 2D array to check if region exists.
        Another advantage of arr[i][j]=99, is that same region elements will be skipped 
        as they will be 99.
    */
    public static int getMaxRegion(int[][] arr,int n,int m){
        int temp_value=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(arr[i][j]==1){
                    current_counter++;
                    arr[i][j]=99;
                    temp_value = checkRegion(arr,i,j);
                    if(maxCounter<current_counter)  // check if maxCounter is less than current_counter.
                        maxCounter=current_counter;
                }
                current_counter=0;  // Set current_counter as 0 after region is completed.
            }
            
        }
        return maxCounter;
    }
    
    public static void main(String[] args) {
        
        Scanner s = new Scanner(System.in);
        int n = s.nextInt();
        int m = s.nextInt();
        int[][] arr = new int[n][m];
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                arr[i][j] = s.nextInt();
            }
        }
        
        System.out.println(getMaxRegion(arr,n,m));  // Print max counter.
        
    }
}
